// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, Socket, TcpDriver, events, net,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  events = require('events');

  net = require('net');

  Socket = net.Socket;

  Promise = require('bluebird');

  TcpDriver = (function(superClass) {
    extend(TcpDriver, superClass);

    function TcpDriver(protocolOptions) {
      this.host = protocolOptions.host;
      this.port = protocolOptions.port;
    }

    TcpDriver.prototype.connect = function(timeout, retries) {
      this.ready = false;
      this.client = new Socket();
      this.client.on('error', (function(_this) {
        return function(error) {
          return _this.emit('error', error);
        };
      })(this));
      this.client.on('close', (function(_this) {
        return function() {
          return _this.emit('close');
        };
      })(this));
      this.client.on('data', (function(_this) {
        return function(data) {
          var line, readyLine;
          data = data.toString();
          line = data.replace(/\0/g, '').trim();
          _this.emit('data', line);
          readyLine = line.match(/ready(?: ([a-z]+)-([0-9]+\.[0-9]+\.[0-9]+))?/);
          if (readyLine != null) {
            _this.ready = true;
            _this.emit('ready', {
              tag: readyLine[1],
              version: readyLine[2]
            });
            return;
          }
          if (!_this.ready) {
            _this.client.write("RESET\n");
            return;
          }
          return _this.emit('line', line);
        };
      })(this));
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var resolver;
          resolver = resolve;
          return _this.client.connect({
            host: _this.host,
            port: _this.port
          }, function() {
            return new Promise(function(resolve, reject) {
              Promise.delay(1000).then(function() {
                return _this.client.write("PING\n");
              }).done();
              return _this.once("ready", resolver);
            }).timeout(timeout)["catch"](function(err) {
              _this.removeListener("ready", resolver);
              if (err.name === "TimeoutError" && retries > 0) {
                _this.emit('reconnect', err);
                return _this.connect(timeout, retries - 1);
              } else {
                throw err;
              }
            });
          });
        };
      })(this)).then('TcpDriver then test');
    };

    TcpDriver.prototype.disconnect = function() {
      return this.client.end();
    };

    TcpDriver.prototype.write = function(data) {
      return this.client.write(data);
    };

    return TcpDriver;

  })(events.EventEmitter);

  module.exports = TcpDriver;

}).call(this);
